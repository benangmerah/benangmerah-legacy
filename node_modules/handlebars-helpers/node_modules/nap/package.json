{
  "name": "nap",
  "version": "0.7.19",
  "author": {
    "name": "Craig Spaeth",
    "email": "craigspaeth@gmail.com",
    "url": "http://craigspaeth.com"
  },
  "description": "Compile and package your assets including stylesheets, javascripts, and client-side javascript templates for node.js",
  "keywords": [
    "node",
    "asset",
    "package",
    "css",
    "javascript",
    "javascript templates"
  ],
  "main": "lib/index",
  "scripts": {
    "test": "mocha"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "dependencies": {
    "coffee-script": "~1",
    "underscore": "~1",
    "underscore.string": "~2",
    "uglify-js": "~2",
    "sqwish": ">= 0.2.0",
    "mkdirp": ">= 0.3.4",
    "file": ">= 0.2.1",
    "glob": "~3",
    "rimraf": "~2"
  },
  "devDependencies": {
    "mocha": "~1",
    "should": "~1",
    "wrench": "~1",
    "jade": ">= 0.27.7",
    "hogan.js": "~2",
    "stylus": ">= 0.31.0",
    "less": "~1",
    "nib": ">= 0.9.0"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/craigspaeth/nap"
  },
  "readme": "# Node Asset Packager\n\n(nap) Node Asset Packager helps compile, manage & package stylesheets, client-side javascript and javascript templates for node.js.\n\n## Example\n\n### 1. Declare asset packages\n\n````javascript\nvar app = express();\nvar nap = require('nap');\n\napp.locals.nap = nap;\n\nnap({\n  assets: {\n    js: {\n      backbone: [\n        '/app/coffeescripts/models/**/*',\n        '/app/coffeescripts/views/**/*',\n        '/app/coffeescripts/routers/**/*'\n      ]\n    },\n    css: {\n      all: [\n        '/public/stylesheets/blueprint.css',\n        '/app/stylesheets/**/*'\n      ]\n    },\n    jst: {\n      templates: [\n        '/app/templates/index.jade',\n        '/app/templates/footer.jade'\n      ]\n    }\n  }\n});\n````\n\n### 2. Include packages in your views by calling one of nap's helpers. (example in [jade](https://github.com/visionmedia/jade))\n\n````jade\n!!!\nhtml\n  head\n    title= title\n    != nap.css('all')\n  body\n    != body\n    #scripts\n      != nap.jst('templates')\n      != nap.js('backbone')\n````\n\n### 3. Concatenate & minify once for production\n\n````javascript\nnap({\n  mode: 'production',\n  assets: {\n    js: //...\n    css: //...\n    jst: //...\n  }\n});\n\nnap.package();\n````\n\nSome express.js based examples can be found in the [examples folder](https://github.com/craigspaeth/nap/tree/master/examples).\n\n## Installation\n\n`npm install nap`\n\n**NOTE: You must include individual pre-processors in your package.json to use them.**\n\n## Usage\n\nTo make things easy nap assumes you have a */public* folder to serve static assets (like an Express.js public folder) so that nap can generate & reference assets inside */public/assets*.\n\nSimply pass a set of options to the main `nap` function to configure your asset packages. Then use one of nap's helpers (`nap.js('package-name')`, `nap.css('package-name')`, `nap.jst('package-name')`) to output `<script>` and `<style> ` tags into your server-side templates.\n\n## Options\n\n#### assets\nThe assets object containing all of your package declarations\n#### appDir\n**defaults to process.cwd()**\nThe base directory to resolve files from.\n#### publicDir\n**defaults to public`**\nYour public directory where you serve static content.\nThis is relative to process.cwd() unless you specify an absolute path.\n#### mode\n**defaults to 'production' on NODE_ENV=staging and NODE_ENV=production, otherwise 'development'**\nThe mode you want nap to be in 'production' or 'development'\n#### cdnUrl\nIf you are using a CDN you can pass the url root of where your asset packages are stored. The nap helpers will point there instead of the local */public/assets* dir in 'production' mode.\n#### gzip\n**defaults to false**\nGzips .jgz and .cgz asset packages. The nap helpers will point to these gzipped packages in production mode unless you pass false as a second argument `nap.js('package-name', false)`\n#### minify\n**defaults to true**\nOpt out of minifying your code when calling `package`.\n#### uglifyOpts\nPass in options to [uglify](https://github.com/mishoo/UglifyJS) such as `{ mangle: false}` to fine-tune minifying.\n\n````javascript\nnap({\n  appDir: process.cwd()\n  publicDir: 'public',\n  mode: process.env.NODE_ENV === 'production' ? 'production' : 'development',\n  cdnUrl: 'http://s3.amazonaws.com/my-bucket/assets/',\n  gzip: true,\n  minify: true,\n  uglifyOpts: { mangle: false },\n  assets: {\n    js: {\n      backbone: [\n        '/app/coffeescripts/models/**/*',\n        '/app/coffeescripts/views/**/*',\n        '/app/coffeescripts/routers/**/*'\n      ]\n    },\n    css: {\n      all: [\n        '/public/stylesheets/blueprint.css',\n        '/app/stylesheets/**/*'\n      ]\n    },\n    jst: {\n      templates: [\n        '/app/templates/index.jade',\n        '/app/templates/footer.jade'\n      ]\n    }\n  }\n});\n````\n\n## JS & CSS Pre-processors\n\nNap will automatically precompile any javascript and css pre-processors based on the file extension.\n\n**NOTE: You must include individual pre-processors in your package.json to use them.**\n\nNap currently only supports the following pre-processors by default. But please feel free to contribute more.\n\n  * [Coffeescript](http://jashkenas.github.com/coffee-script/) (.coffee)\n  * [Stylus](https://github.com/LearnBoost/stylus) (.styl)\n  * [Less](https://github.com/cloudhead/less.git) (.less)\n\n### Adding your own preprocessors\n\nYou can add your own preprocessors to nap by extending `nap.preprocessors`, with a fileExtension: preprocessFunction pair.\n\ne.g.\n\n````javascript\nvar nap = require('nap')\n  , coffee = require('coffee-script');\nnap.preprocessors['.coffee'] = function(contents) { return coffee.compile(contents) };\n````\n\n## Embedding fonts & images in stylesheets\n\nTo embed fonts and images simply suffix your stylesheet with `_embed`, e.g. `fonts_embed.styl`. In \"production\" mode nap will read files inside `url()` declarations from your public directory and embed it in your stylesheet using [data-uri](http://css-tricks.com/data-uris/).\n\n## Client-side Javascript Templating (JSTs)\n\n*jst* packages will run the appropriate template parser based off the file extension. Nap will then namespace your client-side templates into a global `JST['file/path']` function, much like [Jammit](http://documentcloud.github.com/jammit/#jst). The namespace is the directory following *templates* without the file extension.\n\ne.g. The template *app/templates/artwork/detail.jade* will be parsed using jade and can be rendered on the client-side by calling `JST['artwork/detail']({ title: 'Mona Lisa' })`\n\nNap currently only supports the following template parsers by default. But please feel free to contribute more.\n\n * [Jade](https://github.com/visionmedia/jade) (.jade)\n * [Mustache (using Hogan.js)](https://github.com/twitter/hogan.js.git) (.mustache)\n\n### Adding your own template parsers\n\nYou can add your own template parsers to nap by extending `nap.templateParsers`, with a fileExtension: templateParserFunction pair.\n\ne.g.\n\n````javascript\nvar nap = require('nap')\n  , jade = require('jade');\nnap.templateParsers['.jade'] = function(contents) {\n  return jade.compileClient(contents, { compileDebug: true });\n};\n````\n\n## Nap Modes\n\nNap has two modes 'development' and 'production'.\n\n### Development\n\nIn development, nap will run any pre-processors and output a bunch of individual `<script>` and `<link>` tags using one of it's helpers (`nap.js('package-name')`, `nap.css('package-name')`, `nap.jst('package-name')`). Each time these helpers are called they will re-compile these files, resulting in seamless asset compilation on page refresh.\n\n### Production\n\nIn production mode calling `nap.package()` will concatenate all of the files, minify, and finally output the result to a single package file (e.g. *public/assets/package-name.js-<fingerprint>*). Nap will also append a fingerprint for cache busting. See the Rails asset pipeline [1.2 What is Fingerprinting and Why Should I Care?](http://guides.rubyonrails.org/asset_pipeline.html) for details on how this works.\n\n`nap.package(function(){})` can also take a callback if you need to do something after assets have finished packaging.\n\nCalling one of nap's helpers in production mode will simply return a `<script>` or `<link>` tag pointing to the concatenated package file.\n\nYou may also gzip, embed images & fonts, and point to a CDN. See **options** above for more info.\n\n## Middleware\n\nUse nap as middleware to quickly serve files in memory rather than writing to disk. (In 'development' mode only)\n\n````javascript\nvar nap = require('nap')\n  , express = require(\"express\")\n  , app = express.createServer();\n\napp.use(nap.middleware);\n````\n\n## Tests\n\nNap uses [Mocha](https://github.com/visionmedia/mocha) for testing, simply run `mocha`.\n\n````\nmocha\n````\n\n## License\n\n(The MIT License)\n\nCopyright (c) Craig Spaeth <craigspaeth@gmail.com>, Art.sy, 2011-2013\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/craigspaeth/nap/issues"
  },
  "homepage": "https://github.com/craigspaeth/nap",
  "_id": "nap@0.7.19",
  "dist": {
    "shasum": "d8e1d50cbd298d1e4fba99da3c247eb48b937d54"
  },
  "_from": "nap@~0.7.11",
  "_resolved": "https://registry.npmjs.org/nap/-/nap-0.7.19.tgz"
}
