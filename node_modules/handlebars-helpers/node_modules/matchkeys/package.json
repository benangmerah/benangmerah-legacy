{
  "name": "matchkeys",
  "description": "Package.json utility for matching, comparing or filtering keywords against one or more arrays of keywords.",
  "version": "0.1.3",
  "homepage": "https://github.com/jonschlinkert/matchkeys",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonschlinkert/matchkeys.git"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/matchkeys/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jonschlinkert/matchkeys/blob/master/LICENSE-MIT"
    }
  ],
  "main": "matchkeys.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "lodash": "~1.3.1",
    "resolve-dep": "~0.1.3",
    "matchdep": "~0.1.2",
    "chalk": "~0.2.1"
  },
  "devDependencies": {
    "node-foo": "*",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt": "~0.4.1",
    "grunt-readme": "~0.1.8"
  },
  "keywords": [
    "keywords",
    "filter",
    "match",
    "pattern",
    "require resolve",
    "require",
    "resolve file paths",
    "resolve node module",
    "resolve npm module",
    "resolve paths",
    "resolved filepath"
  ],
  "readme": "# matchkeys [![NPM version](https://badge.fury.io/js/matchkeys.png)](http://badge.fury.io/js/matchkeys)\r\n\r\n> A package.json utility for comparing keywords across multiple files.\r\n\r\n\r\n## Getting started\r\n\r\nInstall the module with: `npm install matchkeys --save`\r\n\r\n\r\n```js\r\nvar keys = require('matchkeys');\r\nkeys.match(arrayOne, arrayTwo));\r\n```\r\n\r\n## Usage Example\r\n\r\n```js\r\nvar keys = require('matchkeys');\r\n\r\nvar pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));\r\n// => keywords: ['gruntplugin', 'handlebars-helper', 'assemble']\r\n//\r\nvar pkgTwo = JSON.parse(fs.readFileSync('package.json', 'utf8'));\r\n// => keywords: ['foo', 'bar', 'assemble']\r\n\r\nconsole.log(keys.match(pkg, pkgTwo));\r\n// => ['assemble']\r\n```\r\n\r\n\r\n## Methods\r\n\r\n### matchPkgs\r\n\r\nMatch an array of keywords to multiple arrays of keywords returning the `package.json` object for each match.\r\n\r\n```js\r\nkeys.matchPkgs(Array, ArrayofObjects));\r\n```\r\n\r\nParameters:\r\n\r\n* `Array`: The `package.json` containing the `keywords` property to match against.\r\n* `Array`: An array of `package.json` files, each containing an array of keywords.\r\n\r\n_Note that you do not need to specify the `keywords` property, just the object containing the keywords property_.\r\n\r\n\r\n#### example\r\n\r\nGiven the following:\r\n\r\n```js\r\nvar keys = require('matchkeys');\r\n\r\nvar one = ['apple', 'lime', 'watermelon']\r\nvar two = [\r\n  {\r\n    name: 'citrus',\r\n    keywords: ['lemon', 'lime', 'orange']\r\n  },\r\n  {\r\n    name: 'grains',\r\n    keywords: ['wheat', 'oats', 'barley']\r\n  },\r\n  {\r\n    name: 'fruit',\r\n    keywords: ['apple', 'peach', 'strawberry']\r\n  }\r\n];\r\n\r\nkeys.matchPkgs(one, two));\r\n```\r\n\r\nReturns:\r\n\r\n```js\r\n[\r\n  {\r\n    name: 'citrus',\r\n    keywords: ['lemon', 'lime', 'orange']\r\n  },\r\n  {\r\n    name: 'fruit',\r\n    keywords: ['apple', 'peach', 'strawberry']\r\n  }\r\n]\r\n```\r\n\r\n\r\n### isMatch\r\n\r\nSame as `matchPkgs` but returns `true` or `false`.\r\n\r\n```js\r\nvar keys = require('matchkeys');\r\nkeys.isMatch(Array, ArrayofObjects));\r\n```\r\n\r\nParameters:\r\n\r\n* `Array`: The keywords to match against.\r\n* `Array`: Array of objects (`package.json` files), each containing an array of keywords.\r\n\r\nUsing the same example as `keys.matchPkgs`, this would return:\r\n\r\n```js\r\n[false, false, true]\r\n```\r\n\r\n\r\n### filter\r\n\r\nReturns a list of keywords matching the given minimatch pattern.\r\n\r\n```js\r\nvar keys = require('matchkeys');\r\nkeys.filter('*')\r\n```\r\n\r\n\r\n### resolve\r\n\r\n```js\r\nkeys.resolve('*')\r\n// specify a different config object besides package.json\r\nkeys.resolve('*', config))\r\n```\r\n\r\nReturns the resolved paths to any npm modules that:\r\n\r\n1. Are listed in the `dependencies` of the project's `package.json`, and\r\n1. A keyword is defined matching the name of the module\r\n\r\n\r\n### resolveDev\r\n\r\n```js\r\nkeys.resolveDev('*')\r\n// specify a different config object besides package.json\r\nkeys.resolveDev('*', config))\r\n```\r\n\r\nReturns the resolved paths to any npm modules that:\r\n\r\n1. Are listed in the `devDependencies` of the project's `package.json`, and\r\n1. A keyword is defined matching the name of the module\r\n\r\n\r\n### resolveDev\r\n\r\n```js\r\nkeys.resolveAll('*')\r\n// specify a different config object besides package.json\r\nkeys.resolveAll('*', config))\r\n```\r\n\r\nReturns the resolved paths to any npm modules that:\r\n\r\n1. Are listed in the `dependencies` or `devDependencies` of the project's `package.json`, and\r\n1. A keyword is defined matching the name of the module\r\n\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality.\r\n\r\n\r\n## Related projects\r\n\r\n+ [helpers/resolve-dep](http://github.com/helpers/resolve-dep)\r\n+ [assemble/assemble](https://assemble.io)\r\n+ [assemble/handlebars-helpers](http://gruntjs.com/assemble/handlebars-helpers)\r\n+ [assemble/assemble-less](http://gruntjs.com/assemble/assemble-less)\r\n\r\n\r\n## Author\r\n\r\n**Jon Schlinkert**\r\n\r\n+ [http://github.com/jonschlinkert](http://gruntjs.com/jonschlinkert)\r\n+ [http://twitter.com/jonschlinkert](http://twitter.com/jonschlinkert)\r\n\r\n\r\n## License\r\nCopyright (c) 2013 Jon Schlinkert, contributors.\r\nLicensed under the MIT license.\r\n",
  "readmeFilename": "README.md",
  "_id": "matchkeys@0.1.3",
  "dist": {
    "shasum": "f8099b5b5c363b33174129e51ada64af8d7315ea"
  },
  "_from": "matchkeys@~0.1.3",
  "_resolved": "https://registry.npmjs.org/matchkeys/-/matchkeys-0.1.3.tgz"
}
