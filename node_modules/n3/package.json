{
  "name": "n3",
  "version": "0.2.7",
  "description": "Lightning fast, asynchronous, streaming Turtle / N3 / RDF library.",
  "author": {
    "name": "Ruben Verborgh",
    "email": "ruben.verborgh@gmail.com"
  },
  "keywords": [
    "turtle",
    "rdf",
    "n3",
    "streaming",
    "asynchronous"
  ],
  "license": "MIT",
  "main": "./N3.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "devDependencies": {
    "async": "~0.1.22",
    "chai": "~1.4.2",
    "chai-things": "~0.1.1",
    "colors": "~0.6.0",
    "docco": "~0.6.2",
    "jshint": "~2.1.10",
    "request": "~2.22.0",
    "mocha": ">=1.15.0",
    "istanbul": "~0.1.46",
    "uglify-js": "~2.4.3",
    "browserify": ">=3.x"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/RubenVerborgh/N3.js.git"
  },
  "bugs": {
    "url": "https://github.com/RubenVerborgh/N3.js/issues"
  },
  "testling": {
    "files": "test/*.js",
    "harness": "mocha",
    "browsers": [
      "ie/9..latest",
      "firefox/24..latest",
      "chrome/29..latest",
      "safari/6..latest",
      "iphone/6..latest",
      "ipad/6..latest"
    ]
  },
  "readme": "# Lightning fast, asynchronous, streaming Turtle for JavaScript\n\nThe N3.js library lets you handle [Turtle](http://www.w3.org/TR/turtle/) and [RDF](http://www.w3.org/TR/rdf-primer/) in JavaScript _([Node](http://nodejs.org/) and browser)_ easily.\nIt offers:\n\n- [**Turtle parsing**](#parsing) _([fully compliant](https://github.com/RubenVerborgh/N3.js/tree/master/spec) with the [Turtle standard](http://www.w3.org/TR/turtle/))_\n- [**in-memory storage and manipulation**](#storing)\n- [**Turtle writing**](#writing)\n\nIt has the following characteristics:\n- extreme performance – by far the [fastest parser in JavaScript](https://github.com/RubenVerborgh/N3.js/tree/master/perf)\n- asynchronous – triples arrive as soon as possible\n- streaming – streams are parsed as data comes in, so you can easily parse files that don't fit into memory\n\nAt a later stage, this library will support [Notation3 (N3)](http://www.w3.org/TeamSubmission/n3/),\na Turtle superset.\n\n## Installation\nN3.js comes as an [npm package](https://npmjs.org/package/n3).\n\n``` bash\n$ npm install n3\n```\n\n``` js\nvar N3 = require('n3');\n```\n\nIt is also fully compatible with [browserify](http://browserify.org/).\n<br>\nAlternatively, it offers a minimal browser version (without Node stream support).\n\n``` bash\n$ cd n3\n$ npm install\n$ make browser\n```\n\n``` html\n<script src=\"n3-browser.min.js\"></script>\n```\n\n## Triple representation\nFor maximum performance and easy of use,\ntriples are represented as simple objects.\n<br>\nSince URIs are most common when dealing with RDF,\nthey are represented as simple strings.\n\n``` Turtle\n@prefix c: <http://example.org/cartoons#>.\nc:Tom a c:Cat.\n```\nis represented as\n``` js\n{\n  subject:   'http://example.org/cartoons#Tom',\n  predicate: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',\n  object:    'http://example.org/cartoons#Cat'\n}\n```\n\nLiterals are represented as double quoted strings.\n\n``` Turtle\nc:Tom c:name \"Tom\".\n```\nis represented as\n``` js\n{\n  subject:   'http://example.org/cartoons#Tom',\n  predicate: 'http://example.org/cartoons#name',\n  object:    '\"Tom\"'\n}\n```\n\nThis allows you to create and compare literals fast and easily:\n``` js\ntriple.object === 'http://example.org/cartoons#Cat'\ntriple.object === '\"Tom\"'\n```\n\nThe [Utility](#utility) section details entity representation in more depth.\n\n## Parsing\n\n### From a Turtle string to triples\n\n`N3.Parser` parses strings into triples using a callback.\n<br>\nThe callback's first argument is an error value,\nthe second is a triple.\nIf there are no more triples,\nthe callback is invoked one last time with `null` as `triple` value\nand a hash of prefixes as the third argument.\n\n``` js\nvar parser = N3.Parser();\nparser.parse('@prefix c: <http://example.org/cartoons#>.\\n' +\n             'c:Tom a c:Cat.\\n' +\n             'c:Jerry a c:Mouse;\\n' +\n             '        c:smarterThan c:Tom.',\n             function (error, triple, prefixes) {\n               if (triple)\n                 console.log(triple.subject, triple.predicate, triple.object, '.');\n               else\n                 console.log(\"# That's all, folks!\", prefixes)\n             });\n```\n\nAddionally, a second callback `function (prefix, uri)` can be passed to `parse`.\n\n### From Turtle fragments to triples\n\n`N3.Parser` can also parse triples from a Turtle document that arrives in fragments.\n\n``` js\nvar parser = N3.Parser(), triples = [];\nparser.parse(function (error, triple, prefixes) { triple && triples.push(triple); });\n\nparser.addChunk('@prefix c: <http://example.org/cartoons#>.\\n');\nparser.addChunk('c:Tom a ');\nparser.addChunk('c:Cat. c:Jerry a');\nconsole.log(triples); // First triple\n\nparser.addChunk(' c:Mouse.');\nparser.end();\nconsole.log(triples); // Both triples\n```\n\n### From a Turtle stream to triples\n\n`N3.Parser` can parse streams as they grow, returning triples as soon as they're ready.\n<br>\nThis behavior sets N3.js apart from most other Turtle libraries.\n\n``` js\nvar parser = N3.Parser(),\n    turtleStream = fs.createReadStream('cartoons.ttl');\nparser.parse(turtleStream, console.log);\n```\n\nIn addition, `N3.StreamParser` offers a [Node Stream](http://nodejs.org/api/stream.html) implementation,\nso you can transform Turtle streams and pipe them to anywhere.\nThis solution is ideal if your consumer is slower,\nas it avoids parser backpressure.\n\n``` js\nvar streamParser = N3.StreamParser(),\n    turtleStream = fs.createReadStream('cartoons.ttl');\nturtleStream.pipe(streamParser);\nstreamParser.pipe(new SlowConsumer());\n\nfunction SlowConsumer() {\n  var writer = new require('stream').Writable({ objectMode: true });\n  writer._write = function (triple, encoding, done) {\n    console.log(triple);\n    setTimeout(done, 1000);\n  };\n  return writer;\n}\n```\n\nA dedicated `prefix` event signals every prefix with `prefix` and `uri` arguments.\n\n## Storing\n\nIn this example below, we create a new store and add the triples `:Pluto a :Dog.` and `:Mickey a :Mouse`.\nThen, we find a triple with `:Mickey` as subject.\n\n``` js\nvar store = N3.Store();\nstore.addTriple(':Pluto', 'a', ':Dog');\nstore.addTriple(':Mickey', 'a', ':Mouse');\n\nvar mickey = store.find(':Mickey', null, null)[0];\nconsole.log(mickey.subject, mickey.predicate, mickey.object, '.');\n```\n\n## Writing\n\n### From triples to a string\n\n`N3.Writer` can serialize triples as a Turtle string.\n\n``` js\nvar writer = N3.Writer({ 'c': 'http://example.org/cartoons#' });\nwriter.addTriple('http://example.org/cartoons#Tom',\n                 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',\n                 'http://example.org/cartoons#Cat');\nwriter.addTriple({\n  subject:   'http://example.org/cartoons#Tom',\n  predicate: 'http://example.org/cartoons#name',\n  object:    '\"Tom\"'\n});\nwriter.end(function (error, result) { console.log(result); });\n```\n\n### From triples to a Turtle stream\n\n`N3.Writer` can also write triples to an output stream.\n\n``` js\nvar writer = N3.Writer(process.stdout, { 'c': 'http://example.org/cartoons#' });\nwriter.addTriple('http://example.org/cartoons#Tom',\n                 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',\n                 'http://example.org/cartoons#Cat');\nwriter.addTriple({\n  subject:   'http://example.org/cartoons#Tom',\n  predicate: 'http://example.org/cartoons#name',\n  object:    '\"Tom\"'\n});\nwriter.end();\n```\n\n### From a triple stream to a Turtle stream\n\n`N3.StreamWriter` is a Turtle writer implementation as a [Node Stream](http://nodejs.org/api/stream.html).\n\n``` js\nvar streamParser = new N3.StreamParser(),\n    inputStream = fs.createReadStream('cartoons.ttl'),\n    streamWriter = new N3.StreamWriter({ 'c': 'http://example.org/cartoons#' });\ninputStream.pipe(streamParser);\nstreamParser.pipe(streamWriter);\nstreamWriter.pipe(process.stdout);\n```\n\n## Utility\n`N3.Util` offers helpers for URI and literal representations.\n<br>\nAs URIs are most common, they are represented as simple strings:\n``` js\nvar N3Util = N3.Util;\nN3Util.isUri('http://example.org/cartoons#Mickey'); // true\n```\n**Literals** are represented as double quoted strings:\n``` js\nN3Util.isLiteral('\"Mickey Mouse\"'); // true\nN3Util.getLiteralValue('\"Mickey Mouse\"'); // 'Mickey Mouse'\nN3Util.isLiteral('\"Mickey Mouse\"@en'); // true\nN3Util.getLiteralLanguage('\"Mickey Mouse\"@en'); // 'en'\nN3Util.isLiteral('\"3\"^^<http://www.w3.org/2001/XMLSchema#integer>'); // true\nN3Util.getLiteralType('\"3\"^^<http://www.w3.org/2001/XMLSchema#integer>'); // 'http://www.w3.org/2001/XMLSchema#integer'\nN3Util.isLiteral('\"http://example.org/\"'); // true\nN3Util.getLiteralValue('\"http://example.org/\"'); // 'http://example.org/'\n```\nNote the difference between `'http://example.org/'` (URI) and `'\"http://example.org/\"'` (literal).\n<br>\nAlso note that the double quoted literals are _not_ raw Turtle syntax:\n``` js\nN3Util.isLiteral('\"This word is \"quoted\"!\"'); // true\n```\nThe above string represents the string _This word is \"quoted\"!_,\neven though the correct Turtle syntax for that is `\"This word is \\\"quoted\\\"!\"`\nN3.js thus always parses literals, but adds quotes to differentiate from URIs:\n``` js\nnew N3.Parser().parse('<a> <b> \"This word is \\\\\"quoted\\\\\"!\".', console.log);\n// { subject: 'a', predicate: 'b', object: '\"This word is \"quoted\"!\"' }\n```\n\n**Blank nodes** start with `_:`, and can be tested for as follows:\n``` js\nN3Util.isBlank('_:b1'); // true\nN3Util.isUri('_:b1'); // false\nN3Util.isLiteral('_:b1'); // false\n```\n\n**QNames** can be tested and expanded:\n``` js\nvar prefixes = { 'rdfs': 'http://www.w3.org/2000/01/rdf-schema#' };\nN3Util.isQName('rdfs:label'); // true;\nN3Util.expandQName('rdfs:label', prefixes); // http://www.w3.org/2000/01/rdf-schema#label\n```\n\n### Loading the utility globally\nFor convenience, `N3Util` can also be loaded globally:\n``` js\nrequire('n3').Util(global);\nisUri('http://example.org/cartoons#Mickey'); // true\nisLiteral('\"Mickey Mouse\"'); // true\n```\n\nIf desired, the methods can even be added directly on all strings:\n``` js\nrequire('n3').Util(String, true);\n'http://example.org/cartoons#Mickey'.isUri(); // true\n'\"Mickey Mouse\"'.isLiteral(); // true\n```\n\n# License, status and contributions\nThe N3.js library is copyrighted by [Ruben Verborgh](http://ruben.verborgh.org/)\nand released under the [MIT License](https://github.com/RubenVerborgh/N3.js/blob/master/LICENSE.md).\n\n[![Build Status](https://travis-ci.org/RubenVerborgh/N3.js.png?branch=master)](https://travis-ci.org/RubenVerborgh/N3.js)\n<br>\n[![Browser Build Status](https://ci.testling.com/RubenVerborgh/N3.js.png)](https://ci.testling.com/RubenVerborgh/N3.js)\n\nContributions are welcome, and bug reports or pull requests are always helpful.\nIf you plan to implement larger features, it's best to contact me first.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/RubenVerborgh/N3.js",
  "_id": "n3@0.2.7",
  "dist": {
    "shasum": "50b98e3365f7d296afb6d5cfd41a50e174b15ae4"
  },
  "_from": "n3@",
  "_resolved": "https://registry.npmjs.org/n3/-/n3-0.2.7.tgz"
}
